Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000


Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1] mp0_b.c(17,1)
  -> INLINE: (18,2) test1(void)
    -> INLINE: (34,14) get_clock(void)
    -> INLINE: (38,7) get_clock(void)
  -> INLINE: (19,2) test2(void)
    -> INLINE: (62,14) get_clock(void)
    -> INLINE: (66,7) get_clock(void)
  -> INLINE: (20,2) test3(void)
    -> INLINE: (86,14) get_clock(void)
    -> INLINE: (91,7) get_clock(void)
  -> INLINE: (21,2) test4(void)
    -> INLINE: (115,14) get_clock(void)
    -> INLINE: (120,7) get_clock(void)
  -> INLINE: (22,2) test5(void)
    -> INLINE: (140,14) get_clock(void)
    -> INLINE: (147,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(30,2) inlined into mp0_b.c(18,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ mp0_b.c(162,3) ]
LOOP END

LOOP BEGIN at mp0_b.c(55,2) inlined into mp0_b.c(19,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (56:10) and call:rand(void) (57:10)
LOOP END

LOOP BEGIN at mp0_b.c(60,2) inlined into mp0_b.c(19,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(63,3) inlined into mp0_b.c(19,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3) inlined into mp0_b.c(19,2)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3) inlined into mp0_b.c(19,2)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3) inlined into mp0_b.c(19,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mp0_b.c(84,2) inlined into mp0_b.c(20,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(88,4) inlined into mp0_b.c(20,2)
      remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
      remark #15542: loop was not vectorized: inner loop was already vectorized   [ mp0_b.c(88,4) ]

      LOOP BEGIN at mp0_b.c(87,3) inlined into mp0_b.c(20,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3) inlined into mp0_b.c(20,2)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3) inlined into mp0_b.c(20,2)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3) inlined into mp0_b.c(20,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mp0_b.c(109,2) inlined into mp0_b.c(21,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mp0_b.c(110,3) inlined into mp0_b.c(21,2)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mp0_b.c(111,17) ]
   LOOP END
LOOP END

LOOP BEGIN at mp0_b.c(113,2) inlined into mp0_b.c(21,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mp0_b.c(117,4) inlined into mp0_b.c(21,2)
      remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ mp0_b.c(117,4) ]

      LOOP BEGIN at mp0_b.c(116,3) inlined into mp0_b.c(21,2)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25438: unrolled without remainder by 2  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mp0_b.c(138,2) inlined into mp0_b.c(22,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(141,3) inlined into mp0_b.c(22,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3) inlined into mp0_b.c(22,2)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3) inlined into mp0_b.c(22,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3) inlined into mp0_b.c(22,2)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3) inlined into mp0_b.c(22,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3) inlined into mp0_b.c(22,2)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3) inlined into mp0_b.c(22,2)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3) inlined into mp0_b.c(22,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(17,1):remark #34051: REGISTER ALLOCATION : [main] mp0_b.c:17

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     369
            Global    :     133
            Local     :     236
        Regenerable   :      97
        Spilled       :      17
        
    Routine stack
        Variables     :     164 bytes*
            Reads     :      22 [1.95e+02 ~ 0.0%]
            Writes    :       2 [2.00e+00 ~ 0.0%]
        Spills        :      96 bytes*
            Reads     :      26 [1.84e+02 ~ 0.0%]
            Writes    :      17 [6.86e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test1(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test1(void)) [2] mp0_b.c(27,1)
  -> INLINE: (34,14) get_clock(void)
  -> INLINE: (38,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(30,2)
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ mp0_b.c(162,3) ]
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(27,1):remark #34051: REGISTER ALLOCATION : [test1] mp0_b.c:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rsi rdi r12 zmm0-zmm2]
        
    Routine temporaries
        Total         :      41
            Global    :      15
            Local     :      26
        Regenerable   :      16
        Spilled       :       3
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [3.70e+01 ~ 10.8%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.85e+01 ~ 5.4%]
            Writes    :       3 [1.95e+01 ~ 5.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test2(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test2(void)) [3] mp0_b.c(47,1)
  -> INLINE: (62,14) get_clock(void)
  -> INLINE: (66,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(55,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:rand(void) (56:10) and call:rand(void) (57:10)
LOOP END

LOOP BEGIN at mp0_b.c(60,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(63,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mp0_b.c(63,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(47,1):remark #34051: REGISTER ALLOCATION : [test2] mp0_b.c:47

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     105
            Global    :      36
            Local     :      69
        Regenerable   :      22
        Spilled       :      10
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [3.63e+01 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      13 [8.39e+01 ~ 0.0%]
            Writes    :       5 [1.31e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test3(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test3(void)) [4] mp0_b.c(79,1)
  -> INLINE: (86,14) get_clock(void)
  -> INLINE: (91,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(84,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(88,4)
      remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
      remark #15542: loop was not vectorized: inner loop was already vectorized   [ mp0_b.c(88,4) ]

      LOOP BEGIN at mp0_b.c(87,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3)
         remark #15301: PERMUTED LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mp0_b.c(87,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(79,1):remark #34051: REGISTER ALLOCATION : [test3] mp0_b.c:79

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r10 r14-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      70
            Global    :      33
            Local     :      37
        Regenerable   :      19
        Spilled       :       5
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [4.00e+01 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [1.10e+01 ~ 0.0%]
            Writes    :       2 [1.10e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test4(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test4(void)) [5] mp0_b.c(102,1)
  -> INLINE: (115,14) get_clock(void)
  -> INLINE: (120,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(109,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mp0_b.c(110,3)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mp0_b.c(111,17) ]
   LOOP END
LOOP END

LOOP BEGIN at mp0_b.c(113,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mp0_b.c(117,4)
      remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ mp0_b.c(117,4) ]

      LOOP BEGIN at mp0_b.c(116,3)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25438: unrolled without remainder by 2  
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(102,1):remark #34051: REGISTER ALLOCATION : [test4] mp0_b.c:102

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      79
            Global    :      35
            Local     :      44
        Regenerable   :      22
        Spilled       :       6
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [4.00e+01 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [1.10e+01 ~ 0.0%]
            Writes    :       2 [1.10e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: test5(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (test5(void)) [6] mp0_b.c(132,1)
  -> INLINE: (140,14) get_clock(void)
  -> INLINE: (147,7) get_clock(void)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mp0_b.c(138,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mp0_b.c(141,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(141,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mp0_b.c(144,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mp0_b.c(132,1):remark #34051: REGISTER ALLOCATION : [test5] mp0_b.c:132

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :      96
            Global    :      41
            Local     :      55
        Regenerable   :      18
        Spilled       :       8
        
    Routine stack
        Variables     :      32 bytes*
            Reads     :       4 [4.00e+01 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       4 [3.10e+01 ~ 0.0%]
            Writes    :       3 [1.20e+01 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: get_clock(void)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (get_clock(void)) [7] mp0_b.c(158,1)


    Report from: Code generation optimizations [cg]

mp0_b.c(158,1):remark #34051: REGISTER ALLOCATION : [get_clock] mp0_b.c:158

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rax rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      20
            Global    :       8
            Local     :      12
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [1.99e+00 ~ 6.6%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
